# 빅뱅 멤버들(while문을 통한 출력)
# while문에서의 i(그저 인덱싱을 위한 용도, len-비교 외에 쓰임이 없음)
big_bang = ["지드래곤", "태양", "탑", "대성", "승리"]

i = 0
while i < len(big_bang):
    print(big_bang[i])
    i = i + 1

# 리스트의 인덱스가 필요 없을 때 for문이 유용
# member 변수는 for문의 수행에만 쓰이고 사라지는 로컬변수
# 변수 이름은 x 등 변경이 가능하다
for member in big_bang:
    print(member)

# 1,3,5,7,9 의 제곱을 출력하는 프로그램
for num in [1, 3, 5, 7, 9]:
    print(num * num)

# range 함수(파라미터 1,2,3개 쓰는 버전이 있음)
# 장점 (간편함-굳이 리스트를 만들 필요 없음, 깔끔함, 메모리 효율성 - 공간의 절약)
# for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
#    print(i) # 1~10까지 반복되나, 효율적이지 못함(숫자가 100개라면? 1억개라면?)
    # 1. 파라미터 2개 쓰는 버전
for i in range(1, 11): # 1부터 10까지 있는 리스트를 써라(n부터 m-1까지의 범위)
    print(i)

    # 2. 파라미터 1개 쓰는 버전(0부터 시작, 가장 많이 사용)
for i in range(10): # 0부터 10-1(m-1) 까지의 범위
    print(i) # 0부터 9까지 쓰는 버전(0~9)

    # 3. 파라미터 3개 쓰는 버전(n,m,s) n부터 m-1까지의 범위, 간격이 s
for i in range(3, 17, 3):
    print(i) # 3부터 16까지의 숫자 중 3씩 증가하여 출력(3,6,9,12,15)

for i in range(6, -1, -1): # 6에서 0까지 적으면 1까지 출력되므로, -1까지 적으면 0을 출력할 수 있다.
    # 파이썬에서 끝점은 포함이 안 됨(음수 -1과 같이 가질 경우 n+1로 생각 = -1+1 = 0까지 출력)
    print(i) # 내림차순으로 출력하고 싶을 경우, -1씩 증가(=1씩 감소시킨다)

numbers = [2, 3, 5, 7, 11, 13, 17, 19]

for i in range(8): # 또는 len(numbers)로 표현 가능 - 원소가 여러개일 때는 직접 세기 힘듬
    print(i, numbers[i])